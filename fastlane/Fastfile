require 'yaml'
require 'ostruct'

fastlane_version "1.57.0"

default_platform :ios

platform :ios do
  before_all do

  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Creates new screenshots and uploads them to iTunes Connect"
  lane :screens do
    cocoapods
    match(app_identifier: "com.acast.app.debug", type: "development")
    snapshot
    frameit
    deliver(app: 925311796, app_identifier: "com.acast.app.native.production", skip_metadata: true, force: true)
  end

 def version_string(version_number, build_number)
    "#{version_number} (#{build_number})"
end

  desc "Submit a new daily build to Apple TestFlight"
  desc "A daily build is sent to Guava team by default"
  lane :dailybuild do |options|

    prepare(remote_branch: "development")
    version_number = get_version_number

    build_number = increment_build_number
    complete_version_number = version_string(version_number, build_number)
    gym(scheme: "Goyava-Beta") # Build your app - more options available

     # Increment build number to current date

    clear_derived_data

    #match(type: "appstore")
    pilot(skip_submission: true , distribute_external: "external")


     # Make sure our directory is clean, except for changes Fastlane has made
    clean_build_artifacts

    # push to GitHub

    version = `/usr/libexec/plistbuddy -c Print:CFBundleShortVersionString '../Project/Project-Info.plist'`.strip
   build_number = `cd ..;agvtool what-version -terse`.strip

    git_commit(path: ".",
              message: "Deploying build #{build_number}.")

    push_to_git_remote

   end

    desc "Submit a new weekly build to Apple TestFlight"
    desc "A weekly build is sent to Guava team by default"
    lane :weeklybuild do |options|
     # prepare(remote_branch: "master")

      increment_version_number

      match(type: "appstore")
      gym(scheme: "Guava") # Build your app - more options available
     # pilot

      version_number = get_version_number(xcodeproj: "Guava.xcodeproj")

      # Make sure our directory is clean, except for changes Fastlane has made
      clean_build_artifacts

      # Tag release and push to GitHub
      commit_version_bump message: "Deploying version #{version_number}."
      add_git_tag tag: version_number
      push_to_git_remote
  end


  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    #match(type: "appstore") # more information: https://codesigning.guide
    snapshot
    cert
    sigh
    gym(scheme: "Guava") # Build your app - more options available
    pilot
  end

  desc "Deploy a new version to the App Store"
  lane :appstore do
    match(type: "appstore")
    snapshot
    gym(scheme: "Guava") # Build your app - more options available
    deliver(force: true)
  end

# PRIVATE LANES


  private_lane :project_warm_up do |options|
    # Get configurations
    config = YAML.load(open(File.join(File.dirname(__FILE__), "fastlane_config.yaml")))
    settings = OpenStruct.new(config)
    lane_setting = settings[options[:lane_name]]
  end

private_lane :prepare do |options|

   # ensure_git_status_clean
    git_checkout(remote_branch: options[:remote_branch])
    puts "current_branch new branch #{git_branch}"
    git_pull

    #cocoapods
end

  after_all do |lane|

    # This block is called, only if the executed lane was successful
    # Make sure our directory is clean, except for changes Fastlane has made
    #clean_build_artifacts

    #add all files
    #git_add(path: ".")

    # Commit new build and push to git
   # commit_version_bump
  #  push_to_git_remote

  end

  error do |lane, exception|

  end
end



# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
