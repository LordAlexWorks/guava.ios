require 'yaml'
require 'ostruct'

fastlane_version "1.57.0"

default_platform :ios

platform :ios do
  before_all do
    cocoapods
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Creates new screenshots and uploads them to iTunes Connect"
  lane :screens do
    cocoapods
    match(app_identifier: "com.acast.app.debug", type: "development")
    snapshot
    frameit
    deliver(app: 925311796, app_identifier: "com.acast.app.native.production", skip_metadata: true, force: true)
  end

 def version_string(version_number, build_number)
    "#{version_number} (#{build_number})"
end

  desc "Release a new beta version on TestFlight"
  desc "This action does the following:"
  desc ""
  desc "- Verifies API keys are non-empty"
  desc "- Ensures a clean git status"
  desc "- Increment the build number"
  desc "- Build and sign the app"
  desc "- Upload the ipa file to testFlight"
  desc "- Post a message to slack containing the download link"
  desc "- Commit and push the version bump"
  lane :beta do |options|
    raise "You must specify a version in A.B.X format to deploy." if version.nil? || version.scan(/\d+\.\d+\.\d+/).length == 0

     # Make sure we start off with a clean slate
    ensure_git_branch(branch: 'master')
    #ensure_git_status_clean
    git_pull

     # Increment build number to current date
    build_number = Time.new.strftime("%Y.%m.%d")
    increment_build_number build_number: build_number

    # Generate release notes from CHANGELOG
    changelog_filename = '../CHANGELOG.yml'
    changelog_yaml = YAML.load_file(changelog_filename)
    release_notes = changelog_yaml['upcoming'].map{ |note| note.prepend '- ' }.join("\n")

    # Increment to the specified version number
    increment_version_number version_number: version

      # Add a changelog entry for this version

  changelog_contents = File.read(changelog_filename)
  existing_releases = changelog_contents.split('releases:').last
  this_release = changelog_yaml['upcoming'].map{ |note| note.prepend '  ' }.join("\n")
  changelog_contents = <<-EOS
  upcoming:
  releases:
  - version: #{version}
    date: #{Time.new.strftime("%B %d %Y")}
    notes:
  #{this_release}
  #{existing_releases}
  EOS

  File.open(changelog_filename, 'w') { |file| file.puts changelog_contents }

  # Grab the latest profiles from Apple

  sigh
   # build_number = increment_build_number
  #  complete_version_number = version_string(version_number, build_number)
    gym(scheme: "Goyava-Beta") # Build your app - more options available

     # Increment build number to current date

    clear_derived_data

    #match(type: "appstore")
    pilot(skip_submission: true ,
         distribute_external: true,
         changelog: "Please remove the previous version. Check the issus with the label QA")


     # Make sure our directory is clean, except for changes Fastlane has made
    clean_build_artifacts

    # push to GitHub

    version = `/usr/libexec/plistbuddy -c Print:CFBundleShortVersionString '../Project/Project-Info.plist'`.strip
   build_number = `cd ..;agvtool what-version -terse`.strip

    git_commit(path: ".",
              message: "Deploying build #{build_number}.")

     add_git_tag(
        grouping: 'fastlane-builds',
        prefix: 'v',
        build_number: "#{version_number}-b#{build_number}"
      )

    push_to_git_remote

   end

    desc "Submit a new weekly build to Apple TestFlight"
    desc "A weekly build is sent to Guava team by default"
    lane :weeklybuild do |options|
     # prepare(remote_branch: "master")

      increment_version_number

      match(type: "appstore")
      gym(scheme: "Guava") # Build your app - more options available
     # pilot

      version_number = get_version_number(xcodeproj: "Guava.xcodeproj")

      # Make sure our directory is clean, except for changes Fastlane has made
      clean_build_artifacts

      # Tag release and push to GitHub
      commit_version_bump message: "Deploying version #{version_number}."

      add_git_tag(
        grouping: 'fastlane-builds',
        prefix: 'v',
        build_number: version_number
      )
      push_to_git_remote
  end


  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    #match(type: "appstore") # more information: https://codesigning.guide
    snapshot
    cert
    sigh
    gym(scheme: "Guava") # Build your app - more options available
    pilot
  end

  desc "Deploy a new version to the App Store"
  lane :appstore do
    match(type: "appstore")
    snapshot
    gym(scheme: "Guava") # Build your app - more options available
    deliver(force: true)
  end

# PRIVATE LANES


  private_lane :project_warm_up do |options|
    # Get configurations
    config = YAML.load(open(File.join(File.dirname(__FILE__), "fastlane_config.yaml")))
    settings = OpenStruct.new(config)
    lane_setting = settings[options[:lane_name]]
  end

private_lane :prepare do |options|

   # ensure_git_status_clean
    git_checkout(remote_branch: options[:remote_branch])
    puts "current_branch new branch #{git_branch}"
    git_pull

    #cocoapods
end

  after_all do |lane|

    # This block is called, only if the executed lane was successful
    # Make sure our directory is clean, except for changes Fastlane has made
    #clean_build_artifacts

    #add all files
    #git_add(path: ".")

    # Commit new build and push to git
   # commit_version_bump
  #  push_to_git_remote

  end

  error do |lane, exception|

  end
end



# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
